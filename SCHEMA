The web player and the backend communicate in real time to facilitate video
synchronization. They do this by exchanging JSON messages over the WebSocket API.
This is the schema that describes the messages.

These are described from the perspective of client -> server.
'in' is a message that the server recieves from some client.
Each 'in' message is validated by the server before being handled.

'out' is a message that the server generates and sends to some client/s.

timestamp:
    Each 'out' message contains a timestamp that is generated by the server.
    The client is intended to intelligently ignore information that comes out
    of order by using this timestamp field. Eg if two pause/unpause actions
    are received, but the second has an earlier timestamp than the first,
    the second message should be ignored. The timestamp field
    is created from, and intended to be compared to, `new Date().getTime()`

* join party:
    in = { action: "join", join: <party id as string> }

    'out' is sent to the client, containing party information

    out = { timestamp,
            members: [...<client ids as strings>],
            paused: true/false,
            video: <video id as string>,
            seek: <video seek time in seconds>
          }
            

* pause/unpause:
    in = { action: "paused", paused: true/false }

    The client receives no response. 'out' is sent
    to all other clients in the party.

    out = { ...in, timestamp }

* skip to time:
    in = { action: "seek", seek: <seek time in seconds as integer> }

    The client receives no response. 'out' is sent
    to all other clients in the party.

    out = { ...in, timestamp }
    

* play a new video:
    in = { action: "video", video: <video id as string> }

    https://www.youtube.com/watch?v=nQ2A30cD3Q8
                in["video"] is this ^^^^^^^^^^^

    The client receives no response. 'out' is sent
    to all other clients in the party.

    out = { ...in, timestamp }

* request all party info:
    in = { action: "info" }

    'out' is sent to the client, containing party information
    
    out = { ...in, timestamp, 
            members: [...<client ids as strings>], 
            paused: true/false, 
            video: <video id as string>,
            seek: <video seek time in seconds>
          }
